---
title: "Glasgow LEZ step by step source code"
subtitle: "Findings Transport"
author: "Hyesop Shin"
format:
  html:
    toc: true
editor: source
editor_options: 
  chunk_output_type: console
---


Here is a step-by-step process of our analysis. We ensure that the codes are fully reproducible. We ran the code on a macOS machine. If you're using a different operating system or have a different language set as your locale, you may encounter some errors.


## Import packages
For the analysis, we used a few packages `tidyverse` for data cleaning, analysis, and visualisation, `mgcv` for Generalised Additive Models (GAM), and `rstatix` for Wilcox Sign Rank Test. Note `sf`, `mapview`, and `openair` packages were used to import dataset and explore the preprocessed dataset, so we left them.


```{r echo=T,message=F}
options(scipen = 999)

library(tidyverse)
library(rstatix)
library(mgcv)
#library(sf)
#library(mapview)
#library(openair)

```


## Import Files

For traffic data, we load the traffic csv.
To access the original traffic dataset please visit the `Raw Data/Raw data SCOOT 2022/2023` folders (originally created by Li et al. [(2024)](https://doi.org/10.31219/osf.io/qgf2j)). We chose the study period August 1st to September 30th in both 2022 and 2023.

For more information about traffic, please refer to the UBDC webpage https://www.ubdc.ac.uk/news/new-high-resolution-traffic-flow-dataset-available-from-ubdc.

```{r message=F}
traffic_raw <- read_csv("traffic.csv")

traffic_raw |> 
  filter(dt_date >= "2022-08-01" & dt_date <= "2022-09-30") |> 
  mutate(dt_year = as.factor(dt_year)) |> 
  select(siteId, dt_date, dt_year, week_group, total_flow) |> 
  arrange(dt_date) -> traffic_22

traffic_22

traffic_raw |> 
  filter(dt_date >= "2023-08-01" & dt_date <= "2023-09-30") |> 
  mutate(dt_year = as.factor(dt_year)) |> 
  select(siteId, dt_date, dt_year, week_group, total_flow)  |> 
  arrange(dt_date) -> traffic_23

traffic_23
```

For NO~2~, we used the `openair` R package and downloaded Glasgow's High Street (GHSR) and Hope Street (GLA4) for which the roadside data were available.

Given the dataset, we filtered the data to align with the traffic data, and converted the years to factors which is a plot-friendly format in R. 

```{r message=F}
no2 <- read_csv("no2.csv")

no2 |> 
  filter(dt_date >= "2022-08-01" & dt_date <= "2022-09-30") |> 
  select(code, dt_date, week_group, no2_daily) |> 
  mutate(dt_year = as.factor(2022)) -> no2_22

no2_22


no2 |> 
  filter(dt_date >= "2023-08-01" & dt_date <= "2023-09-30") |> 
  select(code, dt_date, week_group, no2_daily) |> 
  mutate(dt_year = as.factor(2023)) -> no2_23

no2_23
```

Meteorological data was downloaded from the nearest observation station from Glasgow city centre. By far Clincarthill (4.3km away) was the closest station. Using this [link](https://wow.metoffice.gov.uk/observations/details/20240719grm7461f6he69kyhyyguiqktba), we manually downloaded August-Sep 2022-2023. 

Now, the next step is important. We first convert the wind direction from compass (e.g. NW) to meteorological convention (0-360 degrees). In the later stage, this will change to a mathematical convention.

Another step is that we are going to group the days of the week as Core weekdays (Tue-Thu), Other weekdays (Mon, Fri), and Weekends (Sat-Sun).



```{r message=F}
cc22_aug <- read_csv("clincarthill_22_aug.csv")
cc22_sep <- read_csv("clincarthill_22_sep.csv")
cc23_aug <- read_csv("clincarthill_23_aug.csv")
cc23_sep <- read_csv("clincarthill_23_sep.csv")

cc22 <- bind_rows(cc22_aug, cc22_sep)
cc23 <- bind_rows(cc23_aug, cc23_sep)

# Create a named vector mapping compass directions to degrees
compass_to_degrees <- c(
  N = 0, NNE = 22.5, NE = 45, ENE = 67.5,
  E = 90, ESE = 112.5, SE = 135, SSE = 157.5,
  S = 180, SSW = 202.5, SW = 225, WSW = 247.5,
  W = 270, WNW = 292.5, NW = 315, NNW = 337.5
)

cc22 |> 
  rename(dttm = `Report Date / Time`,
         temp = `Air Temperature`,
         hum = `Relative Humidity`,
         ws = `Wind Speed`,                                                     
         wd = `Wind Direction`) |> 
  select(dttm, temp, hum, ws, wd) |> 
  mutate(day_name = wday(dttm, label=TRUE),
         dt_date = as_date(dttm),
         week_group = case_when(day_name %in% c("Mon", "Fri") ~ "Other Weekdays",
                                day_name %in% c("Tue", "Wed", "Thu") ~ "Core Weekdays",
                                day_name %in% c("Sat", "Sun") ~ "Weekends")
  ) |> 
  group_by(dt_date, week_group) |> 
  summarise(ws = mean(ws, na.rm = T),
            wd  = mean(wd, na.rm = T),
            hum = mean(hum, na.rm = T),
            temp = mean(temp, na.rm = T)) |> 
  ungroup() -> weather_by_week


cc23 |> 
  rename(dttm = `Report Date / Time`,
         temp = `Air Temperature`,
         hum = `Relative Humidity`,
         ws = `Wind Speed`,                                                     
         wd = `Wind Direction`) |> 
  select(dttm, temp, hum, ws, wd) |> 
  mutate(day_name = wday(dttm, label=TRUE),
         dt_date = as_date(dttm),
         week_group = case_when(day_name %in% c("Mon", "Fri") ~ "Other Weekdays",
                                day_name %in% c("Tue", "Wed", "Thu") ~ "Core Weekdays",
                                day_name %in% c("Sat", "Sun") ~ "Weekends")
  ) |> 
  group_by(dt_date, week_group) |> 
  summarise(ws = mean(ws, na.rm = T),
            wd  = mean(wd, na.rm = T),
            hum = mean(hum, na.rm = T),
            temp = mean(temp, na.rm = T)) |> 
  ungroup() -> weather_by_week23

```


## Normalising NO~2~
### High Street

Normalising NO~2~ with met data is a very important process to compare the concentration pre- to post- LEZ. Here I used `no2_normalised` to assign variables. This is because I use UK English in my day to day life.

To convert the degree convention to a mathematical convention we used the metric stated below. Degrees are converted to radians by multiplying by Radian per Degree (2Ï€ / 360 = 0.01745329).

![image](https://hackmd-prod-images.s3-ap-northeast-1.amazonaws.com/uploads/upload_7e086dee6fe7dffb3da8ae634e921a10.png?AWSAccessKeyId=AKIA3XSAAW6AWSKNINWO&Expires=1723503291&Signature=3Ecpx0RlCowzDROQLQue7W1%2BXhU%3D)

*u* component represents wind blowing to the East (confusingly known as a "westerly"). *v* is wind to the North (a "southerly" ).

For more information, please refer to [this link](https://www.researchgate.net/publication/262766424_Technical_note_Averaging_wind_speeds_and_directions).

For the normalising process, we used the `gam()` function and smoothed windspeed(ws), easterly & southerly wind directtions, temperature, and relative humidity.


```{r}
no2_22 |> 
  filter(code == "GHSR") |> 
  full_join(traffic_22 |> filter(siteId == "GG2001_S"), by = c("dt_date", "dt_year", "week_group")) |> 
  full_join(weather_by_week, by = c("dt_date", "week_group")) |> 
  mutate(u_wind = ws * sin(wd * pi / 180),
         v_wind = ws * cos(wd * pi / 180))  -> df_highst_22

df_highst_22

gam_highst_22 <- gam(no2_daily ~ s(ws) + s(u_wind) + s(v_wind) + s(temp) + s(hum), data = df_highst_22)
summary(gam_highst_22)

df_highst_22$residuals <- residuals(gam_highst_22)
df_highst_22$no2_normalised <- df_highst_22$residuals + mean(df_highst_22$no2_daily) 
df_highst_22



# High St 2023
no2_23 |> 
  filter(code == "GHSR") |> 
  full_join(traffic_23 |> filter(siteId == "GG2001_S"), by = c("dt_date", "dt_year", "week_group")) |> 
  full_join(weather_by_week23, by = c("dt_date", "week_group")) |> 
  mutate(u_wind = ws * sin(wd * pi / 180),
         v_wind = ws * cos(wd * pi / 180)) -> df_highst_23

df_highst_23

gam_highst_23 <- gam(no2_daily ~ s(ws) + s(u_wind) + s(v_wind) + s(temp) + s(hum), data = df_highst_23)
summary(gam_highst_23)

df_highst_23$residuals <- residuals(gam_highst_23)
df_highst_23$no2_normalised <- df_highst_23$residuals + mean(df_highst_23$no2_daily) 
df_highst_23


bind_rows(df_highst_22, df_highst_23) -> highst
```

Here is the plot for High Street. 

```{r}
ggplot(highst, aes(x = dt_date, y = no2_normalised)) +
  geom_line() +
  facet_wrap(~dt_year, scales = "free_x") +
  labs(title = "Normalized NO2 Concentration",
       x = "",
       y = "Normalised NO2")
```

### Hope Street
Same work applies for Hope Street too.


```{r}
no2_22 |> 
  filter(code == "GLA4") |> 
  full_join(traffic_22 |> filter(siteId == "GA2401_D"), by = c("dt_date", "dt_year", "week_group")) |> 
  full_join(weather_by_week, by = c("dt_date", "week_group")) |> 
  mutate(u_wind = ws * sin(wd * pi / 180),
         v_wind = ws * cos(wd * pi / 180)) -> df_hopest22

df_hopest22

gam_hopest_22 <- gam(no2_daily ~ s(ws) + s(u_wind) + s(v_wind) + s(temp) + s(hum), data = df_hopest22)
summary(gam_hopest_22)

df_hopest22$residuals <- residuals(gam_hopest_22)
df_hopest22$no2_normalised <- df_hopest22$residuals + mean(df_hopest22$no2_daily) 
df_hopest22



no2_23 |> 
  filter(code == "GLA4") |> 
  full_join(traffic_23 |> filter(siteId == "GA2401_D"), by = c("dt_date", "dt_year","week_group")) |> 
  full_join(weather_by_week23, by = c("dt_date", "week_group")) |> 
  mutate(u_wind = ws * sin(wd * pi / 180),
         v_wind = ws * cos(wd * pi / 180)) -> df_hopest23

df_hopest23

gam_hopest_23 <- gam(no2_daily ~ s(ws) + s(u_wind) + s(v_wind) + s(temp) + s(hum), data = df_hopest23)
summary(gam_hopest_23)

df_hopest23$residuals <- residuals(gam_hopest_23)
df_hopest23$no2_normalised <- df_hopest23$residuals + mean(df_hopest23$no2_daily) 
df_hopest23

bind_rows(df_hopest22, df_hopest23) -> hopest
```

Here is a plot.


```{r}
ggplot(hopest, aes(x = dt_date, y = no2_normalised)) +
  geom_line() +
  facet_wrap(~dt_year, scales = "free_x") +
  labs(title = "Normalised NO2 Concentration",
       x = "",
       y = expression("NO"[2] * " (Normalized)"))

```


## Wilcoxon Sign Rank Test
### Removing dates to match statistical test

Okay now, is it now time to move on to the stats test? No! We have one more step to go ðŸ˜…

Since this study compares 2022 to 2023 by week day categories, we need to makes sure that the numbers of days are equivalent between the two groups.

```{r}
highst |> 
  group_by(dt_year, week_group) |> 
  summarise(n = n())
```

In High Street, we see that the core weekdays are equal, but the other weekdays and weekends have a difference.


```{r}
hopest |> 
  group_by(dt_year, week_group) |> 
  summarise(n = n())
```

Sam job is done for Hope Street.


```{r}
# Set seed for reproducibility (optional)
set.seed(123)

# Remove one randomly selected row from "Other Weekdays" where "dt_year" == 2022
highst1 <- highst %>%
  filter(!(row_number() %in% sample(which(week_group == "Other Weekdays" & dt_year == 2022), 1)))

# Remove one randomly selected row from "Weekends" where "dt_year" == 2023
highst2 <- highst1 %>%
  filter(!(row_number() %in% sample(which(week_group == "Weekends" & dt_year == 2023), 1)))

highst2 |> 
  group_by(week_group, dt_year) |> 
  summarise(traffic = mean(total_flow),
            traffic_sd = sd(total_flow),
            traffic_med = median(total_flow),
            no2 = mean(no2_normalised),
            no2_sd = sd(no2_normalised),
            no2_med = median(no2_normalised))
```

```{r}
# Remove one randomly selected row from "Other Weekdays" where "dt_year" == 2022
hopest1 <- hopest %>%
  filter(!(row_number() %in% sample(which(week_group == "Other Weekdays" & dt_year == 2022), 1)))

# Remove one randomly selected row from "Weekends" where "dt_year" == 2023
hopest2 <- hopest1 %>%
  filter(!(row_number() %in% sample(which(week_group == "Weekends" & dt_year == 2023), 1)))

hopest |> 
  group_by(week_group, dt_year) |> 
  summarise(traffic = mean(total_flow),
            traffic_sd = sd(total_flow),
            traffic_med = median(total_flow),
            no2 = mean(no2_normalised),
            no2_sd = sd(no2_normalised),
            no2_med = median(no2_normalised))
```

### Traffic

Okay, now we are ready to run the Wilcox Signed Rank Test. Note this is a "paired" test, thus the observations before and after have to match perfectly.

First, we run the code for High Street.


```{r}
highst2 |> 
  group_by(week_group) |> 
  wilcox_test(total_flow ~ dt_year, paired = T)|> 
  as.data.frame()
```

```{r}
ggplot(highst, aes(x = interaction(dt_year, week_group), y = total_flow, fill = dt_year)) +
  geom_boxplot(outlier.shape = NA) +  # Remove outlier points
  stat_summary(fun=mean, geom="point", shape=18, size=3, color="black", fill="black") +  # Add mean points
  labs(
    title = "Traffic Flow on High Street",
    subtitle = "Comparison between Aug-Sep 2022/2023",
    x = "Year and Week Group",
    y = "Total Traffic Flow",
    caption = "Line = Median, Dot = Mean",
    fill = "Year"
  ) +
  theme_minimal(base_size = 15) +  # Use a minimal theme with larger base font size
  theme(
    #plot.title = element_text(hjust = 0.5),  # Center the plot title
    axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1),  # Rotate x-axis labels and adjust justification
    legend.position = "top"  # Position the legend at the top
  ) +
  scale_x_discrete(labels = function(x) gsub("\\.", "\n", x))  # Replace dots with newlines in x-axis labels

#ggsave("traffic_flow_highst.jpg", width = 6.5, height = 5.5)
```

We do the same job for Hope Street.

```{r}
hopest2 |> 
  group_by(week_group) |> 
  wilcox_test(total_flow ~ dt_year, paired = T)|> 
  as.data.frame()
```

```{r}

ggplot(hopest, aes(x = interaction(dt_year, week_group), y = total_flow, fill = dt_year)) +
  geom_boxplot(outlier.shape = NA) +  # Remove outlier points
  stat_summary(fun=mean, geom="point", shape=18, size=3, color="black", fill="black") +  # Add mean points
  labs(
    title = "Traffic Flow on Hope Street",
    subtitle = "Comparison between Aug-Sep 2022/2023",
    x = "Year and Week Group",
    y = "Total Traffic Flow",
    caption = "Line = Median, Dot = Mean",
    fill = "Year"
  ) +
  theme_minimal(base_size = 15) +  # Use a minimal theme with larger base font size
  theme(
    #plot.title = element_text(hjust = 0.5),  # Center the plot title
    axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1),  # Rotate x-axis labels and adjust justification
    legend.position = "top"  # Position the legend at the top
  ) +
  scale_x_discrete(labels = function(x) gsub("\\.", "\n", x))  # Replace dots with newlines in x-axis labels

#ggsave("traffic_flow_hopest.jpg", width = 6.5, height = 5.5)

```


### NO~2~

High Street

```{r}
highst2 |> 
  group_by(week_group) |> 
  wilcox_test(no2_normalised ~ dt_year, paired = T) |> 
  as.data.frame()
```


```{r}
# NO2 Normalized Comparison
ggplot(highst, aes(x = interaction(dt_year, week_group), y = no2_normalised, fill = dt_year)) +
  geom_boxplot(outlier.shape = NA) +  # Remove outlier points
  ylim(0,30) +
  stat_summary(fun=mean, geom="point", shape=18, size=3, color="black", fill="black") +  # Add mean points
  labs(
    title = "Normalized NO2 Levels on High Street",
    subtitle = "Comparison between Aug-Sep 2022/2023",
    x = "Year and Week Group",
    y = expression("NO"[2] * " (Normalized)"),
    caption = "Line = Median, Dot = Mean",
    fill = "Year"
  ) +
  theme_minimal(base_size = 15) +  # Use a minimal theme with larger base font size
  theme(
    #plot.title = element_text(hjust = 0.5),  # Center the plot title
    axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1),  # Rotate x-axis labels and adjust justification
    legend.position = "top"  # Position the legend at the top
  ) +
  scale_x_discrete(labels = function(x) gsub("\\.", "\n", x)) 

#ggsave("normalized_no2_highst.jpg", width = 6.5, height = 5.5)
```



Hope Street
```{r}
hopest2 |> 
  group_by(week_group) |> 
  wilcox_test(no2_normalised ~ dt_year, paired = T)|> 
  as.data.frame()
```

```{r}

ggplot(hopest, aes(x = interaction(dt_year, week_group), y = no2_normalised, fill = dt_year)) +
  geom_boxplot(outlier.shape = NA) +  # Remove outlier points
  stat_summary(fun=mean, geom="point", shape=18, size=3, color="black", fill="black") +  # Add mean points
  labs(
    title = "Normalized NO2 Levels on Hope Street",
    subtitle = "Comparison between Aug-Sep 2022/2023",
    x = "Year and Week Group",
    y = expression("NO"[2] * " (Normalized)"),
    caption = "Line = Median, Dot = Mean",
    fill = "Year"
  ) +
  theme_minimal(base_size = 15) +  # Use a minimal theme with larger base font size
  theme(
    #plot.title = element_text(hjust = 0.5),  # Center the plot title
    axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1),  # Rotate x-axis labels and adjust justification
    legend.position = "top"  # Position the legend at the top
  ) +
  scale_x_discrete(labels = function(x) gsub("\\.", "\n", x)) 

#ggsave("normalized_no2_hopest.jpg", width = 6.5, height = 5.5)

```



